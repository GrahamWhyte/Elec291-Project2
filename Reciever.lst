0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Thu Mar 24 10:58:12 2016
0000              5   ;--------------------------------------------------------
                  5   $name Reciever
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _direction_PARM_2
0000             27            public _pow_PARM_2
0000             28            public _main
0000             29            public _right_motor_power
0000             30            public _left_motor_power
0000             31            public _direction
0000             32            public _binary2int
0000             33            public _pow
0000             34            public _Timer2_ISR
0000             35            public _Timer5_ISR
0000             36            public __c51_external_startup
0000             37            public _c
0000             38            public _z
0000             39            public _back_left_motor
0000             40            public _left_motor
0000             41            public _back_right_motor
0000             42            public _right_motor
0000             43            public _mode
0000             44            public _binary2int_PARM_2
0000             45            public _b
0000             46            public _RB
0000             47            public _RF
0000             48            public _LB
0000             49            public _LF
0000             50            public _pwm_count
0000             51            public _signal
0000             52            public _buffer
0000             53   ;--------------------------------------------------------
0000             54   ; Special Function Registers
0000             55   ;--------------------------------------------------------
0000             56   _P0             DATA 0x80
0000             57   _SP             DATA 0x81
0000             58   _DPL            DATA 0x82
0000             59   _DPH            DATA 0x83
0000             60   _EMI0TC         DATA 0x84
0000             61   _EMI0CF         DATA 0x85
0000             62   _OSCLCN         DATA 0x86
0000             63   _PCON           DATA 0x87
0000             64   _TCON           DATA 0x88
0000             65   _TMOD           DATA 0x89
0000             66   _TL0            DATA 0x8a
0000             67   _TL1            DATA 0x8b
0000             68   _TH0            DATA 0x8c
0000             69   _TH1            DATA 0x8d
0000             70   _CKCON          DATA 0x8e
0000             71   _PSCTL          DATA 0x8f
0000             72   _P1             DATA 0x90
0000             73   _TMR3CN         DATA 0x91
0000             74   _TMR4CN         DATA 0x91
0000             75   _TMR3RLL        DATA 0x92
0000             76   _TMR4RLL        DATA 0x92
0000             77   _TMR3RLH        DATA 0x93
0000             78   _TMR4RLH        DATA 0x93
0000             79   _TMR3L          DATA 0x94
0000             80   _TMR4L          DATA 0x94
0000             81   _TMR3H          DATA 0x95
0000             82   _TMR4H          DATA 0x95
0000             83   _USB0ADR        DATA 0x96
0000             84   _USB0DAT        DATA 0x97
0000             85   _SCON           DATA 0x98
0000             86   _SCON0          DATA 0x98
0000             87   _SBUF           DATA 0x99
0000             88   _SBUF0          DATA 0x99
0000             89   _CPT1CN         DATA 0x9a
0000             90   _CPT0CN         DATA 0x9b
0000             91   _CPT1MD         DATA 0x9c
0000             92   _CPT0MD         DATA 0x9d
0000             93   _CPT1MX         DATA 0x9e
0000             94   _CPT0MX         DATA 0x9f
0000             95   _P2             DATA 0xa0
0000             96   _SPI0CFG        DATA 0xa1
0000             97   _SPI0CKR        DATA 0xa2
0000             98   _SPI0DAT        DATA 0xa3
0000             99   _P0MDOUT        DATA 0xa4
0000            100   _P1MDOUT        DATA 0xa5
0000            101   _P2MDOUT        DATA 0xa6
0000            102   _P3MDOUT        DATA 0xa7
0000            103   _IE             DATA 0xa8
0000            104   _CLKSEL         DATA 0xa9
0000            105   _EMI0CN         DATA 0xaa
0000            106   __XPAGE         DATA 0xaa
0000            107   _SBCON1         DATA 0xac
0000            108   _P4MDOUT        DATA 0xae
0000            109   _PFE0CN         DATA 0xaf
0000            110   _P3             DATA 0xb0
0000            111   _OSCXCN         DATA 0xb1
0000            112   _OSCICN         DATA 0xb2
0000            113   _OSCICL         DATA 0xb3
0000            114   _SBRLL1         DATA 0xb4
0000            115   _SBRLH1         DATA 0xb5
0000            116   _FLSCL          DATA 0xb6
0000            117   _FLKEY          DATA 0xb7
0000            118   _IP             DATA 0xb8
0000            119   _CLKMUL         DATA 0xb9
0000            120   _SMBTC          DATA 0xb9
0000            121   _AMX0N          DATA 0xba
0000            122   _AMX0P          DATA 0xbb
0000            123   _ADC0CF         DATA 0xbc
0000            124   _ADC0L          DATA 0xbd
0000            125   _ADC0H          DATA 0xbe
0000            126   _SFRPAGE        DATA 0xbf
0000            127   _SMB0CN         DATA 0xc0
0000            128   _SMB1CN         DATA 0xc0
0000            129   _SMB0CF         DATA 0xc1
0000            130   _SMB1CF         DATA 0xc1
0000            131   _SMB0DAT        DATA 0xc2
0000            132   _SMB1DAT        DATA 0xc2
0000            133   _ADC0GTL        DATA 0xc3
0000            134   _ADC0GTH        DATA 0xc4
0000            135   _ADC0LTL        DATA 0xc5
0000            136   _ADC0LTH        DATA 0xc6
0000            137   _P4             DATA 0xc7
0000            138   _TMR2CN         DATA 0xc8
0000            139   _TMR5CN         DATA 0xc8
0000            140   _REG01CN        DATA 0xc9
0000            141   _TMR2RLL        DATA 0xca
0000            142   _TMR5RLL        DATA 0xca
0000            143   _TMR2RLH        DATA 0xcb
0000            144   _TMR5RLH        DATA 0xcb
0000            145   _TMR2L          DATA 0xcc
0000            146   _TMR5L          DATA 0xcc
0000            147   _TMR2H          DATA 0xcd
0000            148   _TMR5H          DATA 0xcd
0000            149   _SMB0ADM        DATA 0xce
0000            150   _SMB1ADM        DATA 0xce
0000            151   _SMB0ADR        DATA 0xcf
0000            152   _SMB1ADR        DATA 0xcf
0000            153   _PSW            DATA 0xd0
0000            154   _REF0CN         DATA 0xd1
0000            155   _SCON1          DATA 0xd2
0000            156   _SBUF1          DATA 0xd3
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1SKIP         DATA 0xd5
0000            159   _P2SKIP         DATA 0xd6
0000            160   _USB0XCN        DATA 0xd7
0000            161   _PCA0CN         DATA 0xd8
0000            162   _PCA0MD         DATA 0xd9
0000            163   _PCA0CPM0       DATA 0xda
0000            164   _PCA0CPM1       DATA 0xdb
0000            165   _PCA0CPM2       DATA 0xdc
0000            166   _PCA0CPM3       DATA 0xdd
0000            167   _PCA0CPM4       DATA 0xde
0000            168   _P3SKIP         DATA 0xdf
0000            169   _ACC            DATA 0xe0
0000            170   _XBR0           DATA 0xe1
0000            171   _XBR1           DATA 0xe2
0000            172   _XBR2           DATA 0xe3
0000            173   _IT01CF         DATA 0xe4
0000            174   _CKCON1         DATA 0xe4
0000            175   _SMOD1          DATA 0xe5
0000            176   _EIE1           DATA 0xe6
0000            177   _EIE2           DATA 0xe7
0000            178   _ADC0CN         DATA 0xe8
0000            179   _PCA0CPL1       DATA 0xe9
0000            180   _PCA0CPH1       DATA 0xea
0000            181   _PCA0CPL2       DATA 0xeb
0000            182   _PCA0CPH2       DATA 0xec
0000            183   _PCA0CPL3       DATA 0xed
0000            184   _PCA0CPH3       DATA 0xee
0000            185   _RSTSRC         DATA 0xef
0000            186   _B              DATA 0xf0
0000            187   _P0MDIN         DATA 0xf1
0000            188   _P1MDIN         DATA 0xf2
0000            189   _P2MDIN         DATA 0xf3
0000            190   _P3MDIN         DATA 0xf4
0000            191   _P4MDIN         DATA 0xf5
0000            192   _EIP1           DATA 0xf6
0000            193   _EIP2           DATA 0xf7
0000            194   _SPI0CN         DATA 0xf8
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0H          DATA 0xfa
0000            197   _PCA0CPL0       DATA 0xfb
0000            198   _PCA0CPH0       DATA 0xfc
0000            199   _PCA0CPL4       DATA 0xfd
0000            200   _PCA0CPH4       DATA 0xfe
0000            201   _VDM0CN         DATA 0xff
0000            202   _DPTR           DATA 0x8382
0000            203   _TMR2RL         DATA 0xcbca
0000            204   _TMR3RL         DATA 0x9392
0000            205   _TMR4RL         DATA 0x9392
0000            206   _TMR5RL         DATA 0xcbca
0000            207   _TMR2           DATA 0xcdcc
0000            208   _TMR3           DATA 0x9594
0000            209   _TMR4           DATA 0x9594
0000            210   _TMR5           DATA 0xcdcc
0000            211   _SBRL1          DATA 0xb5b4
0000            212   _ADC0           DATA 0xbebd
0000            213   _ADC0GT         DATA 0xc4c3
0000            214   _ADC0LT         DATA 0xc6c5
0000            215   _PCA0           DATA 0xfaf9
0000            216   _PCA0CP1        DATA 0xeae9
0000            217   _PCA0CP2        DATA 0xeceb
0000            218   _PCA0CP3        DATA 0xeeed
0000            219   _PCA0CP0        DATA 0xfcfb
0000            220   _PCA0CP4        DATA 0xfefd
0000            221   ;--------------------------------------------------------
0000            222   ; special function bits
0000            223   ;--------------------------------------------------------
0000            224   _P0_0           BIT 0x80
0000            225   _P0_1           BIT 0x81
0000            226   _P0_2           BIT 0x82
0000            227   _P0_3           BIT 0x83
0000            228   _P0_4           BIT 0x84
0000            229   _P0_5           BIT 0x85
0000            230   _P0_6           BIT 0x86
0000            231   _P0_7           BIT 0x87
0000            232   _TF1            BIT 0x8f
0000            233   _TR1            BIT 0x8e
0000            234   _TF0            BIT 0x8d
0000            235   _TR0            BIT 0x8c
0000            236   _IE1            BIT 0x8b
0000            237   _IT1            BIT 0x8a
0000            238   _IE0            BIT 0x89
0000            239   _IT0            BIT 0x88
0000            240   _P1_0           BIT 0x90
0000            241   _P1_1           BIT 0x91
0000            242   _P1_2           BIT 0x92
0000            243   _P1_3           BIT 0x93
0000            244   _P1_4           BIT 0x94
0000            245   _P1_5           BIT 0x95
0000            246   _P1_6           BIT 0x96
0000            247   _P1_7           BIT 0x97
0000            248   _S0MODE         BIT 0x9f
0000            249   _SCON0_6        BIT 0x9e
0000            250   _MCE0           BIT 0x9d
0000            251   _REN0           BIT 0x9c
0000            252   _TB80           BIT 0x9b
0000            253   _RB80           BIT 0x9a
0000            254   _TI0            BIT 0x99
0000            255   _RI0            BIT 0x98
0000            256   _SCON_6         BIT 0x9e
0000            257   _MCE            BIT 0x9d
0000            258   _REN            BIT 0x9c
0000            259   _TB8            BIT 0x9b
0000            260   _RB8            BIT 0x9a
0000            261   _TI             BIT 0x99
0000            262   _RI             BIT 0x98
0000            263   _P2_0           BIT 0xa0
0000            264   _P2_1           BIT 0xa1
0000            265   _P2_2           BIT 0xa2
0000            266   _P2_3           BIT 0xa3
0000            267   _P2_4           BIT 0xa4
0000            268   _P2_5           BIT 0xa5
0000            269   _P2_6           BIT 0xa6
0000            270   _P2_7           BIT 0xa7
0000            271   _EA             BIT 0xaf
0000            272   _ESPI0          BIT 0xae
0000            273   _ET2            BIT 0xad
0000            274   _ES0            BIT 0xac
0000            275   _ET1            BIT 0xab
0000            276   _EX1            BIT 0xaa
0000            277   _ET0            BIT 0xa9
0000            278   _EX0            BIT 0xa8
0000            279   _P3_0           BIT 0xb0
0000            280   _P3_1           BIT 0xb1
0000            281   _P3_2           BIT 0xb2
0000            282   _P3_3           BIT 0xb3
0000            283   _P3_4           BIT 0xb4
0000            284   _P3_5           BIT 0xb5
0000            285   _P3_6           BIT 0xb6
0000            286   _P3_7           BIT 0xb7
0000            287   _IP_7           BIT 0xbf
0000            288   _PSPI0          BIT 0xbe
0000            289   _PT2            BIT 0xbd
0000            290   _PS0            BIT 0xbc
0000            291   _PT1            BIT 0xbb
0000            292   _PX1            BIT 0xba
0000            293   _PT0            BIT 0xb9
0000            294   _PX0            BIT 0xb8
0000            295   _MASTER0        BIT 0xc7
0000            296   _TXMODE0        BIT 0xc6
0000            297   _STA0           BIT 0xc5
0000            298   _STO0           BIT 0xc4
0000            299   _ACKRQ0         BIT 0xc3
0000            300   _ARBLOST0       BIT 0xc2
0000            301   _ACK0           BIT 0xc1
0000            302   _SI0            BIT 0xc0
0000            303   _MASTER1        BIT 0xc7
0000            304   _TXMODE1        BIT 0xc6
0000            305   _STA1           BIT 0xc5
0000            306   _STO1           BIT 0xc4
0000            307   _ACKRQ1         BIT 0xc3
0000            308   _ARBLOST1       BIT 0xc2
0000            309   _ACK1           BIT 0xc1
0000            310   _SI1            BIT 0xc0
0000            311   _TF2            BIT 0xcf
0000            312   _TF2H           BIT 0xcf
0000            313   _TF2L           BIT 0xce
0000            314   _TF2LEN         BIT 0xcd
0000            315   _TF2CEN         BIT 0xcc
0000            316   _T2SPLIT        BIT 0xcb
0000            317   _TR2            BIT 0xca
0000            318   _T2CSS          BIT 0xc9
0000            319   _T2XCLK         BIT 0xc8
0000            320   _TF5H           BIT 0xcf
0000            321   _TF5L           BIT 0xce
0000            322   _TF5LEN         BIT 0xcd
0000            323   _TMR5CN_4       BIT 0xcc
0000            324   _T5SPLIT        BIT 0xcb
0000            325   _TR5            BIT 0xca
0000            326   _TMR5CN_1       BIT 0xc9
0000            327   _T5XCLK         BIT 0xc8
0000            328   _CY             BIT 0xd7
0000            329   _AC             BIT 0xd6
0000            330   _F0             BIT 0xd5
0000            331   _RS1            BIT 0xd4
0000            332   _RS0            BIT 0xd3
0000            333   _OV             BIT 0xd2
0000            334   _F1             BIT 0xd1
0000            335   _PARITY         BIT 0xd0
0000            336   _CF             BIT 0xdf
0000            337   _CR             BIT 0xde
0000            338   _PCA0CN_5       BIT 0xde
0000            339   _CCF4           BIT 0xdc
0000            340   _CCF3           BIT 0xdb
0000            341   _CCF2           BIT 0xda
0000            342   _CCF1           BIT 0xd9
0000            343   _CCF0           BIT 0xd8
0000            344   _ACC_7          BIT 0xe7
0000            345   _ACC_6          BIT 0xe6
0000            346   _ACC_5          BIT 0xe5
0000            347   _ACC_4          BIT 0xe4
0000            348   _ACC_3          BIT 0xe3
0000            349   _ACC_2          BIT 0xe2
0000            350   _ACC_1          BIT 0xe1
0000            351   _ACC_0          BIT 0xe0
0000            352   _AD0EN          BIT 0xef
0000            353   _AD0TM          BIT 0xee
0000            354   _AD0INT         BIT 0xed
0000            355   _AD0BUSY        BIT 0xec
0000            356   _AD0WINT        BIT 0xeb
0000            357   _AD0CM2         BIT 0xea
0000            358   _AD0CM1         BIT 0xe9
0000            359   _AD0CM0         BIT 0xe8
0000            360   _B_7            BIT 0xf7
0000            361   _B_6            BIT 0xf6
0000            362   _B_5            BIT 0xf5
0000            363   _B_4            BIT 0xf4
0000            364   _B_3            BIT 0xf3
0000            365   _B_2            BIT 0xf2
0000            366   _B_1            BIT 0xf1
0000            367   _B_0            BIT 0xf0
0000            368   _SPIF           BIT 0xff
0000            369   _WCOL           BIT 0xfe
0000            370   _MODF           BIT 0xfd
0000            371   _RXOVRN         BIT 0xfc
0000            372   _NSSMD1         BIT 0xfb
0000            373   _NSSMD0         BIT 0xfa
0000            374   _TXBMT          BIT 0xf9
0000            375   _SPIEN          BIT 0xf8
0000            376   ;--------------------------------------------------------
0000            377   ; overlayable register banks
0000            378   ;--------------------------------------------------------
0000            379            rbank0 segment data overlay
0000            380   ;--------------------------------------------------------
0000            381   ; internal ram data
0000            382   ;--------------------------------------------------------
0000            383            rseg R_DSEG
0000            384   _buffer:
0000            385            ds 33
0021            386   _signal:
0021            387            ds 33
0042            388   _pwm_count:
0042            389            ds 1
0043            390   _LF:
0043            391            ds 1
0044            392   _LB:
0044            393            ds 1
0045            394   _RF:
0045            395            ds 1
0046            396   _RB:
0046            397            ds 1
0047            398   _b:
0047            399            ds 1
0048            400   _binary2int_PARM_2:
0048            401            ds 2
004A            402   _binary2int_num_1_37:
004A            403            ds 2
004C            404   ;--------------------------------------------------------
004C            405   ; overlayable items in internal ram 
004C            406   ;--------------------------------------------------------
0000            407            rseg    R_OSEG
0000            408   _pow_PARM_2:
0000            409            ds 2
0002            410            rseg    R_OSEG
0002            411   _direction_PARM_2:
0002            412            ds 1
0003            413            rseg    R_OSEG
0003            414            rseg    R_OSEG
0003            415   ;--------------------------------------------------------
0003            416   ; indirectly addressable internal ram data
0003            417   ;--------------------------------------------------------
0000            418            rseg R_ISEG
0000            419   ;--------------------------------------------------------
0000            420   ; absolute internal ram data
0000            421   ;--------------------------------------------------------
0000            422            DSEG
0000            423   ;--------------------------------------------------------
0000            424   ; bit data
0000            425   ;--------------------------------------------------------
0000            426            rseg R_BSEG
0000            427   _mode:
0000            428            DBIT    1
0001            429   _right_motor:
0001            430            DBIT    1
0002            431   _back_right_motor:
0002            432            DBIT    1
0003            433   _left_motor:
0003            434            DBIT    1
0004            435   _back_left_motor:
0004            436            DBIT    1
0005            437   _z:
0005            438            DBIT    1
0006            439   _c:
0006            440            DBIT    1
0007            441   _Timer2_ISR_sloc0_1_0:
0007            442            DBIT    1
0008            443   ;--------------------------------------------------------
0008            444   ; paged external ram data
0008            445   ;--------------------------------------------------------
0000            446            rseg R_PSEG
0000            447   ;--------------------------------------------------------
0000            448   ; external ram data
0000            449   ;--------------------------------------------------------
0000            450            rseg R_XSEG
0000            451   ;--------------------------------------------------------
0000            452   ; absolute external ram data
0000            453   ;--------------------------------------------------------
0000            454            XSEG
0000            455   ;--------------------------------------------------------
0000            456   ; external initialized ram data
0000            457   ;--------------------------------------------------------
0000            458            rseg R_IXSEG
0000            459            rseg R_HOME
0000            460            rseg R_GSINIT
0000            461            rseg R_CSEG
0000            462   ;--------------------------------------------------------
0000            463   ; Reset entry point and interrupt vectors
0000            464   ;--------------------------------------------------------
0000            465            CSEG at 0x0000
0000 020100     466            ljmp    _crt0
002B            467            CSEG at 0x002b
002B 020100     468            ljmp    _Timer2_ISR
00A3            469            CSEG at 0x00a3
00A3 020100     470            ljmp    _Timer5_ISR
00A6            471   ;--------------------------------------------------------
00A6            472   ; global & static initialisations
00A6            473   ;--------------------------------------------------------
0000            474            rseg R_HOME
0000            475            rseg R_GSINIT
0000            476            rseg R_GSINIT
0000            477   ;--------------------------------------------------------
0000            478   ; data variables initialization
0000            479   ;--------------------------------------------------------
0000            480            rseg R_DINIT
0000            481            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            482   ;--------------------------------------------------------
0000            483   ; code
0000            484   ;--------------------------------------------------------
0000            485            rseg R_CSEG
0000            486   ;------------------------------------------------------------
0000            487   ;Allocation info for local variables in function '_c51_external_startup'
0000            488   ;------------------------------------------------------------
0000            489   ;------------------------------------------------------------
0000            490   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:36: char _c51_external_startup (void)
0000            491   ;        -----------------------------------------
0000            492   ;         function _c51_external_startup
0000            493   ;        -----------------------------------------
0000            494   __c51_external_startup:
0000            495            using   0
0000            496   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:38: PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
0000 53D9BF     497            anl     _PCA0MD,#0xBF
0003            498   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:39: VDM0CN=0x80; // enable VDD monitor
0003 75FF80     499            mov     _VDM0CN,#0x80
0006            500   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:40: RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD
0006 75EF06     501            mov     _RSTSRC,#0x06
0009            502   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:49: CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
0009 43A903     503            orl     _CLKSEL,#0x03
000C            504   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:53: OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
000C 43B203     505            orl     _OSCICN,#0x03
000F            506   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:56: SCON0 = 0x10; 
000F 759810     507            mov     _SCON0,#0x10
0012            508   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:58: TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
0012 758D30     509            mov     _TH1,#0x30
0015            510   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:59: CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
0015 538EF4     511            anl     _CKCON,#0xF4
0018            512   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:60: CKCON |=  0x08;
0018 438E08     513            orl     _CKCON,#0x08
001B            514   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:73: TL1 = TH1;      // Init Timer1
001B 858D8B     515            mov     _TL1,_TH1
001E            516   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit autoreload
001E 53890F     517            anl     _TMOD,#0x0F
0021            518   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:75: TMOD |=  0x20;                       
0021 438920     519            orl     _TMOD,#0x20
0024            520   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:76: TR1 = 1; // START Timer1
0024 D28E       521            setb    _TR1
0026            522   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:77: TI = 1;  // Indicate TX0 ready
0026 D299       523            setb    _TI
0028            524   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:80: P2MDOUT|=0b_0000_0011;
0028 43A603     525            orl     _P2MDOUT,#0x03
002B            526   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:81: P0MDOUT |= 0x10; // Enable UTX as push-pull output
002B 43A410     527            orl     _P0MDOUT,#0x10
002E            528   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:82: XBR0     = 0x01; // Enable UART on P0.4(TX) and P0.5(RX)                     
002E 75E101     529            mov     _XBR0,#0x01
0031            530   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:83: XBR1     = 0x40; // Enable crossbar and weak pull-ups
0031 75E240     531            mov     _XBR1,#0x40
0034            532   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:86: TMR2CN=0x00;   // Stop Timer2; Clear TF2;
0034 75C800     533            mov     _TMR2CN,#0x00
0037            534   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:87: CKCON|=0b_0001_0000;
0037 438E10     535            orl     _CKCON,#0x10
003A            536   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:88: TMR2RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
003A 75CA78     537            mov     _TMR2RL,#0x78
003D 75CBEC     538            mov     (_TMR2RL >> 8),#0xEC
0040            539   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:89: TMR2=0xffff;   // Set to reload immediately
0040 75CCFF     540            mov     _TMR2,#0xFF
0043 75CDFF     541            mov     (_TMR2 >> 8),#0xFF
0046            542   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:90: ET2=1;         // Enable Timer2 interrupts
0046 D2AD       543            setb    _ET2
0048            544   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:91: TR2=1;         // Start Timer2
0048 D2CA       545            setb    _TR2
004A            546   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:94: SFRPAGE = 0xF;
004A 75BF0F     547            mov     _SFRPAGE,#0x0F
004D            548   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:95: TMR5CN=0x00;   // Stop Timer5; Clear TF5;
004D 75C800     549            mov     _TMR5CN,#0x00
0050            550   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:96: CKCON1|=0b_0000_0100;
0050 43E404     551            orl     _CKCON1,#0x04
0053            552   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:99: TMR5RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
0053 75CA78     553            mov     _TMR5RL,#0x78
0056 75CBEC     554            mov     (_TMR5RL >> 8),#0xEC
0059            555   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:102: TMR5=0xffff;   // Set to reload immediately
0059 75CCFF     556            mov     _TMR5,#0xFF
005C 75CDFF     557            mov     (_TMR5 >> 8),#0xFF
005F            558   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:103: EIE2 |= ET5;        // Enable Timer5 interrupts
005F 43E720     559            orl     _EIE2,#0x20
0062            560   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:104: TR5=1;         // Start Timer5
0062 D2CA       561            setb    _TR5
0064            562   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:106: return 0;
0064 758200     563            mov     dpl,#0x00
0067 22         564            ret
0068            565   ;------------------------------------------------------------
0068            566   ;Allocation info for local variables in function 'Timer5_ISR'
0068            567   ;------------------------------------------------------------
0068            568   ;------------------------------------------------------------
0068            569   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:110: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0068            570   ;        -----------------------------------------
0068            571   ;         function Timer5_ISR
0068            572   ;        -----------------------------------------
0068            573   _Timer5_ISR:
0068 C0E0       574            push    acc
006A C002       575            push    ar2
006C C000       576            push    ar0
006E C0D0       577            push    psw
0070 75D000     578            mov     psw,#0x00
0073            579   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:113: PUSH_SFRPAGE;
0073 C0BF       580             push _SFRPAGE 
0075            581   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:114: SFRPAGE=0xf;
0075 75BF0F     582            mov     _SFRPAGE,#0x0F
0078            583   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:116: TF5H = 0; // Clear Timer5 interrupt flag
0078 C2CF       584            clr     _TF5H
007A            585   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:117: if(b<33){
007A 74DF       586            mov     a,#0x100 - 0x21
007C 2570       587            add     a,_b
007E 4001       588            jc      L003002?
0080            589   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:118: signal[32-b] = SIGNAL_IN;
0080 7420       590            mov     a,#0x20
0082 C3         591            clr     c
0083 9570       592            subb    a,_b
0085 24F0       593            add     a,#_signal
0087 F8         594            mov     r0,a
0088 A2A1       595            mov     c,_P2_1
008A E4         596            clr     a
008B 33         597            rlc     a
008C FA         598            mov     r2,a
008D F6         599            mov     @r0,a
008E            600   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:119: b++;
008E 0570       601            inc     _b
0090            602   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:121: SFRPAGE=0xf;
0090 75BF0F     603            mov     _SFRPAGE,#0x0F
0093            604   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:122: POP_SFRPAGE;
0093 D0BF       605             pop _SFRPAGE 
0095            606   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:123: return;
0095 8001       607            sjmp    L003003?
0097            608   L003002?:
0097            609   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:126: b = 0;
0097 757000     610            mov     _b,#0x00
009A            611   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:127: SFRPAGE=0xf;
009A 75BF0F     612            mov     _SFRPAGE,#0x0F
009D            613   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:128: POP_SFRPAGE;
009D D0BF       614             pop _SFRPAGE 
009F            615   L003003?:
009F D0D0       616            pop     psw
00A1 D000       617            pop     ar0
00A3 D002       618            pop     ar2
00A5 D0E0       619            pop     acc
00A7 32         620            reti
00A8            621   ;        eliminated unneeded push/pop ar1
00A8            622   ;        eliminated unneeded push/pop dpl
00A8            623   ;        eliminated unneeded push/pop dph
00A8            624   ;        eliminated unneeded push/pop b
00A8            625   ;------------------------------------------------------------
00A8            626   ;Allocation info for local variables in function 'Timer2_ISR'
00A8            627   ;------------------------------------------------------------
00A8            628   ;------------------------------------------------------------
00A8            629   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:132: void Timer2_ISR (void) interrupt 5
00A8            630   ;        -----------------------------------------
00A8            631   ;         function Timer2_ISR
00A8            632   ;        -----------------------------------------
00A8            633   _Timer2_ISR:
00A8 C0E0       634            push    acc
00AA C0D0       635            push    psw
00AC 75D000     636            mov     psw,#0x00
00AF            637   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:134: SFRPAGE = 0x0;
00AF 75BF00     638            mov     _SFRPAGE,#0x00
00B2            639   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:135: TF2H = 0; // Clear Timer2 interrupt flag
00B2 C2CF       640            clr     _TF2H
00B4            641   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:137: pwm_count++;
00B4 05B0       642            inc     _pwm_count
00B6            643   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:138: if(pwm_count>100) pwm_count=0;
00B6 E5B0       644            mov     a,_pwm_count
00B8 249B       645            add     a,#0xff - 0x64
00BA 5001       646            jnc     L004002?
00BC 75B000     647            mov     _pwm_count,#0x00
00BF            648   L004002?:
00BF            649   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:140: if(LB == 0){
00BF E530       650            mov     a,_LB
00C1 7001       651            jnz     L004004?
00C3            652   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:141: LEFT_FORWARD=pwm_count>LF?0:1;
00C3 C3         653            clr     c
00C4 E570       654            mov     a,_LF
00C6 95B0       655            subb    a,_pwm_count
00C8 9220       656            mov  _Timer2_ISR_sloc0_1_0,c
00CA B3         657            cpl     c
00CB 92A1       658            mov     _P2_1,c
00CD            659   L004004?:
00CD            660   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:143: if(LF == 0){
00CD E570       661            mov     a,_LF
00CF 7001       662            jnz     L004006?
00D1            663   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:144: LEFT_BACKWARD=pwm_count>LB?0:1;
00D1 C3         664            clr     c
00D2 E530       665            mov     a,_LB
00D4 95B0       666            subb    a,_pwm_count
00D6 9220       667            mov  _Timer2_ISR_sloc0_1_0,c
00D8 B3         668            cpl     c
00D9 92A1       669            mov     _P2_1,c
00DB            670   L004006?:
00DB            671   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:146: if(RB == 0){
00DB E5B0       672            mov     a,_RB
00DD 7001       673            jnz     L004008?
00DF            674   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:147: RIGHT_FORWARD=pwm_count>RF?0:1;
00DF C3         675            clr     c
00E0 E5F0       676            mov     a,_RF
00E2 95B0       677            subb    a,_pwm_count
00E4 9220       678            mov  _Timer2_ISR_sloc0_1_0,c
00E6 B3         679            cpl     c
00E7 92A1       680            mov     _P2_1,c
00E9            681   L004008?:
00E9            682   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:149: if(RF == 0){
00E9 E5F0       683            mov     a,_RF
00EB 7001       684            jnz     L004011?
00ED            685   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:150: RIGHT_BACKWARD=pwm_count>RB?0:1;
00ED C3         686            clr     c
00EE E5B0       687            mov     a,_RB
00F0 95B0       688            subb    a,_pwm_count
00F2 9220       689            mov  _Timer2_ISR_sloc0_1_0,c
00F4 B3         690            cpl     c
00F5 92A1       691            mov     _P2_1,c
00F7            692   L004011?:
00F7 D0D0       693            pop     psw
00F9 D0E0       694            pop     acc
00FB 32         695            reti
00FC            696   ;        eliminated unneeded push/pop dpl
00FC            697   ;        eliminated unneeded push/pop dph
00FC            698   ;        eliminated unneeded push/pop b
00FC            699   ;------------------------------------------------------------
00FC            700   ;Allocation info for local variables in function 'pow'
00FC            701   ;------------------------------------------------------------
00FC            702   ;exp                       Allocated with name '_pow_PARM_2'
00FC            703   ;base                      Allocated to registers r2 r3 
00FC            704   ;i                         Allocated to registers 
00FC            705   ;result                    Allocated to registers r4 r5 
00FC            706   ;------------------------------------------------------------
00FC            707   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:154: int pow( int base, int exp){
00FC            708   ;        -----------------------------------------
00FC            709   ;         function pow
00FC            710   ;        -----------------------------------------
00FC            711   _pow:
00FC AA82       712            mov     r2,dpl
00FE AB83       713            mov     r3,dph
0100            714   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:157: int result = 0;
0100            715   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:159: while(1 != exp)
0100 E4         716            clr     a
0101 FC         717            mov     r4,a
0102 FD         718            mov     r5,a
0103 E590       719            mov     a,_pow_PARM_2
0105 B40160     720            cjne    a,#0x01,L005008?
0108 E591       721            mov     a,(_pow_PARM_2 + 1)
010A 7001       722            jnz     L005008?
010C 7401       723            mov     a,#0x01
010E 8001       724            sjmp    L005009?
0110            725   L005008?:
0110 E4         726            clr     a
0111            727   L005009?:
0111 FE         728            mov     r6,a
0112            729   L005001?:
0112 EE         730            mov     a,r6
0113 7001       731            jnz     L005003?
0115            732   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:160: result += base;
0115 EA         733            mov     a,r2
0116 2C         734            add     a,r4
0117 FC         735            mov     r4,a
0118 EB         736            mov     a,r3
0119 3D         737            addc    a,r5
011A FD         738            mov     r5,a
011B 8001       739            sjmp    L005001?
011D            740   L005003?:
011D            741   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:162: return result;
011D 8C82       742            mov     dpl,r4
011F 8D83       743            mov     dph,r5
0121 22         744            ret
0122            745   ;------------------------------------------------------------
0122            746   ;Allocation info for local variables in function 'binary2int'
0122            747   ;------------------------------------------------------------
0122            748   ;stop                      Allocated with name '_binary2int_PARM_2'
0122            749   ;start                     Allocated to registers r2 r3 
0122            750   ;counter                   Allocated to registers r6 r7 
0122            751   ;num                       Allocated with name '_binary2int_num_1_37'
0122            752   ;------------------------------------------------------------
0122            753   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:165: int binary2int(int start, int stop){
0122            754   ;        -----------------------------------------
0122            755   ;         function binary2int
0122            756   ;        -----------------------------------------
0122            757   _binary2int:
0122 AA82       758            mov     r2,dpl
0124 AB83       759            mov     r3,dph
0126            760   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:168: int num = 0;
0126 E4         761            clr     a
0127 F5D0       762            mov     _binary2int_num_1_37,a
0129 F5D1       763            mov     (_binary2int_num_1_37 + 1),a
012B            764   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:170: for(counter = start; counter <= stop; counter++)
012B 8A06       765            mov     ar6,r2
012D 8B07       766            mov     ar7,r3
012F            767   L006001?:
012F C3         768            clr     c
0130 E530       769            mov     a,_binary2int_PARM_2
0132 9E         770            subb    a,r6
0133 E531       771            mov     a,(_binary2int_PARM_2 + 1)
0135 6480       772            xrl     a,#0x80
0137 8FF0       773            mov     b,r7
0139 63F080     774            xrl     b,#0x80
013C 95F0       775            subb    a,b
013E 4001       776            jc      L006004?
0140            777   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:171: num += signal[counter]*pow(2, counter - start);
0140 EE         778            mov     a,r6
0141 24F0       779            add     a,#_signal
0143 F8         780            mov     r0,a
0144 8604       781            mov     ar4,@r0
0146 EE         782            mov     a,r6
0147 C3         783            clr     c
0148 9A         784            subb    a,r2
0149 F590       785            mov     _pow_PARM_2,a
014B EF         786            mov     a,r7
014C 9B         787            subb    a,r3
014D F591       788            mov     (_pow_PARM_2 + 1),a
014F 900002     789            mov     dptr,#0x0002
0152 C002       790            push    ar2
0154 C003       791            push    ar3
0156 C004       792            push    ar4
0158 C006       793            push    ar6
015A C007       794            push    ar7
015C 120100     795            lcall   _pow
015F 858200     796            mov     __mulint_PARM_2,dpl
0162 858301     797            mov     (__mulint_PARM_2 + 1),dph
0165 D007       798            pop     ar7
0167 D006       799            pop     ar6
0169 D004       800            pop     ar4
016B 7D00       801            mov     r5,#0x00
016D 8C82       802            mov     dpl,r4
016F 8D83       803            mov     dph,r5
0171 C006       804            push    ar6
0173 C007       805            push    ar7
0175 120100     806            lcall   __mulint
0178 AC82       807            mov     r4,dpl
017A AD83       808            mov     r5,dph
017C D007       809            pop     ar7
017E D006       810            pop     ar6
0180 D003       811            pop     ar3
0182 D002       812            pop     ar2
0184 EC         813            mov     a,r4
0185 25D0       814            add     a,_binary2int_num_1_37
0187 F5D0       815            mov     _binary2int_num_1_37,a
0189 ED         816            mov     a,r5
018A 35D1       817            addc    a,(_binary2int_num_1_37 + 1)
018C F5D1       818            mov     (_binary2int_num_1_37 + 1),a
018E            819   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:170: for(counter = start; counter <= stop; counter++)
018E 0E         820            inc     r6
018F BE0060     821            cjne    r6,#0x00,L006001?
0192 0F         822            inc     r7
0193 8001       823            sjmp    L006001?
0195            824   L006004?:
0195            825   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:173: return num;
0195 85D082     826            mov     dpl,_binary2int_num_1_37
0198 85D183     827            mov     dph,(_binary2int_num_1_37 + 1)
019B 22         828            ret
019C            829   ;------------------------------------------------------------
019C            830   ;Allocation info for local variables in function 'direction'
019C            831   ;------------------------------------------------------------
019C            832   ;right                     Allocated with name '_direction_PARM_2'
019C            833   ;left                      Allocated to registers r2 
019C            834   ;------------------------------------------------------------
019C            835   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:176: void direction(unsigned char left, unsigned char right)
019C            836   ;        -----------------------------------------
019C            837   ;         function direction
019C            838   ;        -----------------------------------------
019C            839   _direction:
019C AA82       840            mov     r2,dpl
019E            841   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:178: if (left == 1 && right == 1) //both forward moters high  
019E E4         842            clr     a
019F BA01A0     843            cjne    r2,#0x01,L007026?
01A2 04         844            inc     a
01A3            845   L007026?:
01A3 FB         846            mov     r3,a
01A4 6001       847            jz      L007013?
01A6 7401       848            mov     a,#0x01
01A8 B550E8     849            cjne    a,_direction_PARM_2,L007013?
01AB            850   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:180: right_motor = 1; 
01AB D2A0       851            setb    _right_motor
01AD            852   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:181: left_motor = 1;
01AD D210       853            setb    _left_motor
01AF            854   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:182: back_right_motor = 0; 
01AF C260       855            clr     _back_right_motor
01B1            856   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:183: back_left_motor = 0;   
01B1 C2D0       857            clr     _back_left_motor
01B3 22         858            ret
01B4            859   L007013?:
01B4            860   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:185: else if (left == 1 && right == 0) // left forward high, right backward high
01B4 EB         861            mov     a,r3
01B5 6001       862            jz      L007009?
01B7 E550       863            mov     a,_direction_PARM_2
01B9 7001       864            jnz     L007009?
01BB            865   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:187: right_motor = 0; 
01BB C2A0       866            clr     _right_motor
01BD            867   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:188: left_motor = 1; 
01BD D210       868            setb    _left_motor
01BF            869   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:189: back_right_motor = 1; 
01BF D260       870            setb    _back_right_motor
01C1            871   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:190: back_left_motor = 0; 
01C1 C2D0       872            clr     _back_left_motor
01C3 22         873            ret
01C4            874   L007009?:
01C4            875   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:192: else if (left == 0 && right == 1) // left backward high, right forward high  
01C4 EA         876            mov     a,r2
01C5 7001       877            jnz     L007005?
01C7 7401       878            mov     a,#0x01
01C9 B55068     879            cjne    a,_direction_PARM_2,L007005?
01CC            880   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:194: right_motor = 1; 
01CC D2A0       881            setb    _right_motor
01CE            882   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:195: left_motor = 0; 
01CE C210       883            clr     _left_motor
01D0            884   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:196: back_right_motor = 1; 
01D0 D260       885            setb    _back_right_motor
01D2            886   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:197: back_left_motor = 0; 
01D2 C2D0       887            clr     _back_left_motor
01D4 22         888            ret
01D5            889   L007005?:
01D5            890   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:199: else if (left == 0 && right == 0) //both backward moters high
01D5 EA         891            mov     a,r2
01D6 7001       892            jnz     L007016?
01D8 E550       893            mov     a,_direction_PARM_2
01DA 7001       894            jnz     L007016?
01DC            895   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:201: right_motor = 0; 
01DC C2A0       896            clr     _right_motor
01DE            897   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:202: left_motor = 0; 
01DE C210       898            clr     _left_motor
01E0            899   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:203: back_right_motor = 1; 
01E0 D260       900            setb    _back_right_motor
01E2            901   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:204: back_left_motor = 1; 
01E2 D2D0       902            setb    _back_left_motor
01E4            903   L007016?:
01E4 22         904            ret
01E5            905   ;------------------------------------------------------------
01E5            906   ;Allocation info for local variables in function 'left_motor_power'
01E5            907   ;------------------------------------------------------------
01E5            908   ;power                     Allocated to registers r2 r3 
01E5            909   ;------------------------------------------------------------
01E5            910   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:208: void left_motor_power(int power)
01E5            911   ;        -----------------------------------------
01E5            912   ;         function left_motor_power
01E5            913   ;        -----------------------------------------
01E5            914   _left_motor_power:
01E5 AA82       915            mov     r2,dpl
01E7 AB83       916            mov     r3,dph
01E9            917   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:210: if (left_motor == 1)
01E9 3010E8     918            jnb     _left_motor,L008010?
01EC            919   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:211: LF = power; 
01EC 8A70       920            mov     _LF,r2
01EE 22         921            ret
01EF            922   L008010?:
01EF            923   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:212: else if (left_motor == 0) 
01EF 201028     924            jb      _left_motor,L008007?
01F2            925   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:213: LF = 0; 
01F2 757000     926            mov     _LF,#0x00
01F5 22         927            ret
01F6            928   L008007?:
01F6            929   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:214: else if (back_left_motor == 1)
01F6 30D068     930            jnb     _back_left_motor,L008004?
01F9            931   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:215: LB = power; 
01F9 8A30       932            mov     _LB,r2
01FB 22         933            ret
01FC            934   L008004?:
01FC            935   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:216: else if (back_left_motor == 0)
01FC 20D0A8     936            jb      _back_left_motor,L008012?
01FF            937   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:217: LB = 0; 
01FF 753000     938            mov     _LB,#0x00
0202            939   L008012?:
0202 22         940            ret
0203            941   ;------------------------------------------------------------
0203            942   ;Allocation info for local variables in function 'right_motor_power'
0203            943   ;------------------------------------------------------------
0203            944   ;power                     Allocated to registers r2 r3 
0203            945   ;------------------------------------------------------------
0203            946   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:220: void right_motor_power(int power)
0203            947   ;        -----------------------------------------
0203            948   ;         function right_motor_power
0203            949   ;        -----------------------------------------
0203            950   _right_motor_power:
0203 AA82       951            mov     r2,dpl
0205 AB83       952            mov     r3,dph
0207            953   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:222: if (right_motor == 1)
0207 30A0E8     954            jnb     _right_motor,L009010?
020A            955   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:223: RF = power; 
020A 8AF0       956            mov     _RF,r2
020C 22         957            ret
020D            958   L009010?:
020D            959   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:224: else if (right_motor == 0) 
020D 20A028     960            jb      _right_motor,L009007?
0210            961   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:225: RF = 0; 
0210 75F000     962            mov     _RF,#0x00
0213 22         963            ret
0214            964   L009007?:
0214            965   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:226: else if (back_right_motor == 1)
0214 306068     966            jnb     _back_right_motor,L009004?
0217            967   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:227: RB = power; 
0217 8AB0       968            mov     _RB,r2
0219 22         969            ret
021A            970   L009004?:
021A            971   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:228: else if (back_right_motor == 0)
021A 2060A8     972            jb      _back_right_motor,L009012?
021D            973   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:229: RB = 0; 
021D 75B000     974            mov     _RB,#0x00
0220            975   L009012?:
0220 22         976            ret
0221            977   ;------------------------------------------------------------
0221            978   ;Allocation info for local variables in function 'main'
0221            979   ;------------------------------------------------------------
0221            980   ;temp_1                    Allocated to registers r2 
0221            981   ;temp_2                    Allocated to registers r2 
0221            982   ;------------------------------------------------------------
0221            983   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:232: void main(void){
0221            984   ;        -----------------------------------------
0221            985   ;         function main
0221            986   ;        -----------------------------------------
0221            987   _main:
0221            988   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:238: _c51_external_startup();
0221 120100     989            lcall   __c51_external_startup
0224            990   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:239: b = 0;
0224 757000     991            mov     _b,#0x00
0227            992   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:240: mode = 0;
0227 C2E0       993            clr     _mode
0229            994   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:241: LF = 0;
0229 757000     995            mov     _LF,#0x00
022C            996   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:242: LB = 0;
022C 753000     997            mov     _LB,#0x00
022F            998   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:243: RF = 0;
022F 75F000     999            mov     _RF,#0x00
0232           1000   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:244: RB = 0;
0232 75B000    1001            mov     _RB,#0x00
0235           1002   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:248: while(!SIGNAL_IN);
0235           1003   L010001?:
0235 30A1E8    1004            jnb     _P2_1,L010001?
0238           1005   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:249: EA = 1;
0238 D2AF      1006            setb    _EA
023A           1007   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:256: while(b == MODE_BIT);
023A           1008   L010004?:
023A 740C      1009            mov     a,#0x0C
023C B57068    1010            cjne    a,_b,L010039?
023F 8001      1011            sjmp    L010004?
0241           1012   L010039?:
0241           1013   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:258: mode = signal[32] ? 0:1;      //need to know size of start 
0241 E510      1014            mov     a,(_signal + 0x0020)
0243 B401A8    1015            cjne    a,#0x01,L010040?
0246           1016   L010040?:
0246 92E0      1017            mov     _mode,c
0248           1018   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:261: if(mode == joystick)
0248 20E0E8    1019            jb      _mode,L010019?
024B           1020   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:265: SFRPAGE = 0xF;
024B 75BF0F    1021            mov     _SFRPAGE,#0x0F
024E           1022   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:266: EIE2 |= ET5;
024E 43E720    1023            orl     _EIE2,#0x20
0251           1024   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:267: SFRPAGE = 0;
0251 75BF00    1025            mov     _SFRPAGE,#0x00
0254           1026   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:268: while(b != DIRECTION); 
0254           1027   L010007?:
0254 740F      1028            mov     a,#0x0F
0256 B57028    1029            cjne    a,_b,L010007?
0259           1030   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:270: direction(signal[DIRECTION], signal[DIRECTION+1]); 
0259 85FF82    1031            mov     dpl,(_signal + 0x000f)
025C 850050    1032            mov     _direction_PARM_2,(_signal + 0x0010)
025F 120100    1033            lcall   _direction
0262           1034   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:272: while(b != POWER1);
0262           1035   L010010?:
0262 7416      1036            mov     a,#0x16
0264 B57068    1037            cjne    a,_b,L010010?
0267           1038   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:274: temp_1 = binary2int(POWER1, POWER2);
0267 75301D    1039            mov     _binary2int_PARM_2,#0x1D
026A E4        1040            clr     a
026B F531      1041            mov     (_binary2int_PARM_2 + 1),a
026D 900016    1042            mov     dptr,#0x0016
0270 120100    1043            lcall   _binary2int
0273           1044   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:275: left_motor_power(temp_1); 
0273 7B00      1045            mov     r3,#0x00
0275 8B83      1046            mov     dph,r3
0277 120100    1047            lcall   _left_motor_power
027A           1048   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:278: while(b != POWER2);
027A           1049   L010013?:
027A 741D      1050            mov     a,#0x1D
027C B570A8    1051            cjne    a,_b,L010013?
027F           1052   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:280: temp_2 = binary2int(POWER2, 0);
027F E4        1053            clr     a
0280 F530      1054            mov     _binary2int_PARM_2,a
0282 F531      1055            mov     (_binary2int_PARM_2 + 1),a
0284 90001D    1056            mov     dptr,#0x001D
0287 120100    1057            lcall   _binary2int
028A           1058   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:281: right_motor_power(temp_2);
028A 7B00      1059            mov     r3,#0x00
028C 8B83      1060            mov     dph,r3
028E 120100    1061            lcall   _right_motor_power
0291 8001      1062            sjmp    L010004?
0293           1063   L010019?:
0293           1064   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:287: else if (mode == tether)
0293 30E028    1065            jnb     _mode,L010004?
0296           1066   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:291: SFRPAGE = 0xF;
0296 75BF0F    1067            mov     _SFRPAGE,#0x0F
0299           1068   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:292: EIE2 &= 0b1101_1111;
0299 53E7DF    1069            anl     _EIE2,#0xDF
029C           1070   ;        C:\Users\Graham\Documents\GitHub\Elec291-Project2\Reciever.c:293: SFRPAGE = 0;
029C 75BF00    1071            mov     _SFRPAGE,#0x00
029F 020100    1072            ljmp    L010004?
02A2           1073            rseg R_CSEG
02A2           1074   
0000           1075            rseg R_XINIT
0000           1076   
0000           1077            rseg R_CONST
0000           1078   
00A6           1079            CSEG
00A6           1080   
00A6           1081   end
